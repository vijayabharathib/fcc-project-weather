var apiURLOriginal="https://api.openweathermap.org/data/2.5/weather?lat=13&lon=80&appid=0f92d0a980ae6e7fec3a210ee045a359",apiURL="http://api.openweathermap.org/data/2.5/weather?units=metric&",apiKey="0f92d0a980ae6e7fec3a210ee045a359",iconURL="https://openweathermap.org/img/w/",locationAvailable=!1,coordinates={lat:"",lon:""},debug=!1,log=function(e){debug&&console.log(e)},stub={coord:{lon:79.95,lat:12.97},weather:[{id:801,main:"Clouds",description:"few clouds",icon:"02n"}],base:"stations",main:{temp:24.14,pressure:1010.68,humidity:58,temp_min:24.14,temp_max:24.14,sea_level:1020.92,grnd_level:1010.68},wind:{speed:3.77,deg:84.5033},clouds:{all:12},dt:1476891739,sys:{message:.0108,country:"IN",sunrise:1476837068,sunset:1476879519},id:1255630,name:"Sriperumbudur",cod:200},weatherAPIData={};$(document).ready(function(){function e(){log("inside getcoordinates"),$("#progress").html("Receiving coordinates..."),"geolocation"in navigator&&(log("geolocation functionality available"),navigator.geolocation.getCurrentPosition(a,t,n))}function a(e){log("coordinates successfully received inside showPosition"),locationAvailable=!0,coordinates.lat=e.coords.latitude,coordinates.lon=e.coords.longitude,log("inside show position: lat:"+coordinates.lat+"lon:"+coordinates.lon),o()}function t(e){log("inside position error with error code "+e.code),1==e.code?(locationAvailable=!1,$("#progress").html("Error getting coordinates: Permission denied")):2==e.code?(locationAvailable=!1,$("#progress").html("Error: Unable to get location.")):log("unhandled position error 3 - timeout")}function o(){log("inside getweather"),0!=locationAvailable&&(log("getWeather: location available"),$("#progress").html("Receiving weather details..."),$.ajax({url:apiURL+"lat="+coordinates.lat+"&lon="+coordinates.lon+"&appid="+apiKey,success:function(e){weatherAPIData=e;var a=new Date;$("#progress").html("Weather details updated at "+a.toTimeString()+"."),log("weather details received"),i()},cache:!0}))}function i(){if(0!=locationAvailable){log("renderWeather : proceeding"),$(".temperature").html(weatherAPIData.main.temp),$(".unit").html("&deg;C"),$(".location").html(weatherAPIData.name+", "+weatherAPIData.sys.country);var e=weatherAPIData.weather[0].icon;$(".icon").css("background-image","url('"+iconURL+e+".png')"),"d"==e[e.length-1]?($("body").addClass("day"),$("body").removeClass("night")):"n"==e[e.length-1]&&($("body").addClass("night"),$("body").removeClass("day"))}}var n={timeout:1e4,maximumAge:0,enableHighAccuracy:!0};log("page loaded"),e(),$(".toggle").on("click",function(){var e=$(".unit").text();if("F"==e[e.length-1]){var a=Math.round(100*weatherAPIData.main.temp);a/=100,$(".temperature").html(a),$(".unit").html("&deg;C"),$(".toggle").removeClass("fa-toggle-on"),$(".toggle").addClass("fa-toggle-off")}else{var t=Math.round(100*(9*weatherAPIData.main.temp/5+32));t/=100,$(".temperature").html(t),$(".unit").html("&deg;F"),$(".toggle").removeClass("fa-toggle-off"),$(".toggle").addClass("fa-toggle-on")}}),$(".get-weather").on("click",function(){log("inside Get/Refresh weather button click"),e()})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
